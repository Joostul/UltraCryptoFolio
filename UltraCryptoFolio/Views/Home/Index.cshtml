@model UltraCryptoFolio.Models.Portfolio

@{
    ViewData["Title"] = "Index";
}

<h2>Portfolio overview</h2>

<div class="alert alert-warning">
    <a href="#" class="close" data-dismiss="alert">&times;</a>
    <strong>Warning!</strong> We don't save your data, be sure to export your data if you don't want to lose it.
</div>

<div>
    <a class="btn btn-primary" asp-action="ExportPortfolio" style="background-color:#59c7a6; border:none">Export</a>
    <a class="btn btn-primary" asp-action="ImportPortfolio" style="background-color:#59c7a6; border:none">Import</a>
    <a class="btn btn-outline-secondary" asp-action="ExampleData" style="border-color:#59c7a6;">Example data</a>
</div>

<div class="container">
    <div class="row">
        <div class="col">
            <table class="table">
                <thead>
                    <tr>
                        <th>Indicator</th>
                        <th>Value (@Model.MonetaryCurrency)</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Total Crypto value:</td>
                        <td>@Model.GetTotalCryptoValue()</td>
                    </tr>
                    <tr>
                        <td>Total cash investment:</td>
                        <td>@Model.GetTotalMonetaryInvestment()</td>
                    </tr>
                    <tr>
                        <td>Total cash divestment:</td>
                        <td>@Model.GetTotalMonetaryDivestment()</td>
                    </tr>
                    <tr>
                        <td>Profit/loss:</td>
                        @{
                            var totalProfit = Model.GetTotalValue();

                            if (totalProfit > 0)
                            {
                                <td style="color:green">@totalProfit</td>
                            }
                            else
                            {
                                <td style="color:darkred">@totalProfit</td>
                            }
                        }
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="col">
            <h3>Relative Portfolio holdings</h3>
            <canvas id="doughnutContainer" class="chartjs-render-monitor"></canvas>
        </div>
    </div>
</div>


<script type="text/javascript">
    var config = {
        type: 'doughnut',
        data: {
            datasets: [{
                data: @ViewBag.Data,
                backgroundColor: @Html.Raw(ViewBag.Colors)
            }],
            labels: @Html.Raw(ViewBag.Labels)
        },
        options: {
            responsive: true,
            legend: {
                position: 'left'
            },
            animation: {
                animateScale: true,
                animateRotate: true
            }
        }
    }

    window.onload = function () {
        var ctx = document.getElementById("doughnutContainer").getContext("2d");
        window.myDoughnut = new Chart(ctx, config);
    }
</script>


<h3>Portfolio</h3>
<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th>Currency</th>
                <th>Holdings (in sathosi or tokens)</th>
                <th>Valuation (@Model.MonetaryCurrency)</th>
                <th>Invested</th>
                <th>Divested</th>
                <th>Profit</th>
                <th>Spent</th>
                <th>Dividends</th>
                <th>% Growth</th>
                <th>% Holdings</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var value in Model.CryptoValues)
            {
                <tr>
                    <td>@value.CryptoCurrency</td>
                    <td>@value.Amount.ToString("N0")</td>
                    <td>@value.MonetaryValue</td>
                    <td>@value.AmountInvested</td>
                    <td>@value.AmountDivested</td>
                    <td>@value.CurrentProfit</td>
                    <td>@value.AmountSpent</td>
                    <td>@value.DividendsReceived</td>
                    @{
                        var growth = Model.GetPercentGrowth(value.CryptoCurrency);
                        if (growth == Decimal.MaxValue)
                        {
                            <td>inf %</td>
                        }
                        else
                        {
                            <td>@growth  %</td>
                        }
                    }
                    <td>@Model.GetPercentHoldings(value.CryptoCurrency) %</td>
                </tr>
            }
        </tbody>
    </table>
</div>


